name: build project

on: 
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

env: 
  functionWorkingDirectory: ./function/
  functionAppName: policyMonitor
  AZURE_FUNCTIONAPP_NAME: bureau-mgmt-policyCompliance-func
  AZURE_FUNCTIONAPP_PACKAGE_PATH: ./function/
  AZURE_FUNCTIONAPP_ENTRYPOINT: ./function/policyMonitor

jobs:
#   validate:
#     runs-on: ubuntu-latest
#     steps:        
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Logs into Azure
#       - uses: azure/login@v1
#         name: Sign in to Azure
#         with: 
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       # Uses ARM preflight validation to check for problems   
#       - uses: azure/arm-deploy@v1
#         name: Run preflight validation
#         with:
#           scope: subscription
#           region: eastus2
#           deploymentName: ${{ github.run_number }}
#           template: ./deploy/main.bicep
#           parameters: ./deploy/main.parameters.json
#           deploymentMode: Validate
  
  # preview:
  #   runs-on: ubuntu-latest
  #   needs: validate
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
    
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #   # Uses ARM preflight validation to check for problems
  #     - uses: azure/arm-deploy@v1
  #       name: Run what-if
  #       with:
  #         scope: subscription
  #         region: eastus2
  #         failOnStdErr: false
  #         template: ./deploy/main.bicep
  #         parameters: ./deploy/main.parameters.json
  #         # additionalArguments: --what-if

  build_and_install:
    runs-on: ubuntu-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    - name: Build extensions
      run: |
        if [ -f extensions.csproj ]; then
            dotnet build extensions.csproj --runtime ubuntu-latest --output ./bin
        fi
      working-directory: "${{ env.functionWorkingDirectory }}"

    - name: Use Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install application dependencies
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd
      #working-directory: "${{ env.functionWorkingDirectory }}"

       # Logs into Azure
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        entrypoint: 
        #publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true
  
  createFunctionZip:
    runs-on: ubuntu-latest
    needs: build_and_install
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Uploads zip file
      - uses: actions/upload-artifact@v3
        with:
          name: function
          path: "${{ env.functionWorkingDirectory }}"

  # functionDeployment:
  #   name: Build Solution
  #   needs: 
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Deploys Function App
  #     - uses: azure/arm-deploy@v1
  #       name: Run Function Bicep deployment
  #       with:
  #         resourceGroupName: rg-azureResume
  #         region: eastus2
  #         failOnStdErr: false
  #         template: ./deploy/modules/main.bicep
  #         parameters: ./deploy/modules/main.parameters.json    

  #     - name: Deploy Function App
  #       uses: azure/cli@2.0.0
  #       with:
  #         azure-cli-version: 2.18.1
  #         inlineScript: |
  #           az deployment group create --name "func-${{ env.BUILD_ID }}" --resource-group ${{ env.resourceGroupName }} --template-file ${{ env.BUILD_WORKSPACE }}/PolicyMonitor/templates/function-app/main.bicep --parameters logAnalyticsWorkspaceResourceId="${{ env.logAnalyticsWorkspaceResourceId }}" appInsightsName="${{ env.appInsightsName }}" appServicePlanName="${{ env.appServicePlanName }}" appServicePlanSku="${{ env.appServicePlanSku }}" functionAppName="${{ env.functionAppName }}" keyVaultName="${{ env.keyVaultName }}" keyVaultSku="${{ env.keyVaultSku }}" storageAccountName="${{ env.storageAccountName }}" storageSku="${{ env.storageSku }}"
  #     - name: Azure Functions App Deploy
  #       uses: Azure/functions-action@v1
  #       with:
  #         app-name: ${{ env.functionAppName }}
  #         package: ${{ env.BUILD_WORKSPACE }}/drop/${{ env.BUILD_ID }}.zip
  #     - name: Wait 2 Minutes
  #       run: |
  #         sleep 120

  # createCDN:
  #   runs-on: ubuntu-latest
  #   needs: buildStaticWebsite
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Uses ARM preflight validation to check for problems
  #     - uses: azure/arm-deploy@v1
  #       name: Run what-if
  #       with:
  #         resourceGroupName: rg-azureResume
  #         region: eastus2
  #         failOnStdErr: false
  #         template: ./deploy/modules/cdn.bicep
  #         parameters: ./deploy/modules/cdn.parameters.json
  #         # additionalArguments: --what-if
    
  # enableHTTPS:
  #   runs-on: ubuntu-latest
  #   needs: createCDN
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Runs Azure CLI to enable static website and copy files to container    
  #     - uses: azure/CLI@v1
  #       name: Enable HTTPS
  #       with:
  #         inlineScript: |
  #           az cdn custom-domain enable-https -g rg-azureResume --profile-name ashearinresumecdn --endpoint-name ashearinresume -n customDomain --min-tls-version 1.2

  # buildCosmosDb:
  #   runs-on: ubuntu-latest
  #   needs: enable-https
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Deploys Cosmos Db
  #     - uses: azure/arm-deploy@v1
  #       name: Run Cosmos Db deployment
  #       with:
  #         resourceGroupName: rg-azureResume
  #         region: eastus2
  #         failOnStdErr: false
  #         template: ./deploy/modules/cosmos.bicep
  #         parameters: ./deploy/modules/cosmos.parameters.json

  # buildFunction:
  #   runs-on: ubuntu-latest
  #   needs: buildCosmosDb
  #   steps:

  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
      
  #     # Logs into Azure
  #     - uses: azure/login@v1
  #       name: Sign in to Azure
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Deploys Function App
  #     - uses: azure/arm-deploy@v1
  #       name: Run Function deployment
  #       with:
  #         resourceGroupName: rg-azureResume
  #         region: eastus2
  #         failOnStdErr: false
  #         template: ./deploy/modules/functionMain.bicep
  #         parameters: ./deploy/modules/functionMain.parameters.json

  #     # Runs Azure CLI to deploy function zip   
  #     - uses: azure/CLI@v1
  #       name: Deploy function files to function app
  #       with:
  #         inlineScript: |
  #           az functionapp deployment source config-zip -g rg-azureResume -n fnapp-resume-m4hlhzfsttuqg --src "./backend/api/function.zip"